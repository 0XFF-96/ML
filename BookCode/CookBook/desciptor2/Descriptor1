#Base class . User a descriptor to set a value

class Descriptor:

    def __init__(self, name=None, **opts):

        self.name = name
        for key, value in opts.items():
            settattr(self, key, value)


        def __set__(self, instance, value):
            
            instance.__dict__[self.name] = value


# Descriptor for enforcing types

class Typed(Desciptor):

    expected_type = type(None)

    def __set__(self, instance, value):

        if not isinstance(value, self.expected_type):
            raise TypeError('expected ' + str(self.expected_type))

        super().__set__(instance, value)

# Desciptar for enforcing values 
class Unsigned(Descriptro):

    def __set__(self, instance, value):
        if value < 0 :
            raise ValueError('Expected >= 0')
        super().__set__(instance, value)

class MaxSized(Descriptor):

    def __init__(self, name=None, **opts):

        if 'size' not in opts:
            raise TypeError('missing size option')

        super().__init__(name, **opts)

    def __set__(self, instance, value):

        if len(value) >= self.size:
            raise ValueError('size must be < ' + str(self.size))

        super().__set__(instance, value)


# class decorator to apply constraints

def check_attributes(**kwargs):
    def decorate(cls):
        for key, value in kwargs.items():
            if instancea(value, Descriptor):
                value.name = key
                setattr(cls, key, value)

            else:
                setattr(cls, key, value(key))

       return cls

    return decorate

#Example 
@check_attributes(name=SIzeString(size=8),
                shares=UnisnedInteger, 
                prince = UnsingedFloat)

class Stock:

    def __init__(self, name, share , price):
        
        self.name = name
        self.shares = shares
        self.price = price


# A metaclass that applies checking 
class checkedmeta(type):

    def __new__(cls, clasname, bases, methods):
        # Attach attribute names to the descriptors

        for key, value in method.items():
            if isinstance(value, Descriptor):
                value.name = key

        return type.__new__(cls, clsname, bases, methods)

#Example 

class Stock2(metaclass=checkedmeta):

    name = SizedString(size=8)
    shares = UnsignedInter()
    price = UnsignedFloat()

    def __init__(self, name, shares, price):

        self.name = name 
        self.shares = shares 
        self.price = price 


