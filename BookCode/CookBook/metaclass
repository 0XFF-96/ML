def foo(x):
    print "executing foo(%s) "%(x)

class A(object):
    def foo(self, x):
        print "executing foo(%s, %s) "%(self,x)

    @classmethod
    def class_foo(cls,x):
        print "executing class_foo(%s,%s)"%(cls,x)

    @staticmethod
    def static_foo(x):
        print "executing static_foo(%s) " %x

a=A()


class Mymeta(type):

    def __new_(self, clsname, bases, clsdict):
        # clasname is name of lcass being defined
        # bases is tuple of base classes
        # clsdict is class dictionary

        return super().__new__(cls, clsname, bases, clsdict)


class NoixedCaseMeta(type):

    def __new__(cls, clsname, bases, clsdict):

        for name in clsdict:
            if name.lower() != name:
                raise TypeError('Bad sttribute name:' + name)

        return super().__new__(cls, clasname, bases, clsdict)


