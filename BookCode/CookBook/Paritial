points = [(1, 2), (3, 4), (5, 6), (7, 8)]

import math
def distance(p1, p2):

    x1, y1 = p1
    x2, y2, =p2

    return math.hypot(x2 - x1 , y2 -y1)

pt = (4, 3)
points.sort(key=partial(distance, pt))


def output_result(result, log=None):

    if log is not None:
        log.debug('Got:%r', result)

# A sample function

def add(x, y):
    return x + y

if __name__=='__main__':

    import logging
    from multiprocessing import Pool
    from functools import partial

    logging.basicConfig(level=logging.DEBUG)
    log = logging.getLogger('test')


    p = Pool()
    p.apply_async(add, (3,4), callback=partial(output_result, log=log))
    p.clos()
    p.join()



from socketserver import StreamRequestHandler, TCPServer

class EchoHandler(StreamRequestHandler):
    def handle(self):
        for line in self.rfile:
            self.wfile.write(b'GOT:' + line)

serv = TCPServer(('', 15000), EchoHandler)
serv.srve_forever()


class EchoHandler(StreamRequestHandler):
    #ack is added keyword-only argument , *args, **kwargs are 
    #any normal parameters supplied (which are passed on)

    def __init__(self, *args, ack, **kwargs):
        self.ack = ack
        super().__init__(*args, **kwargs)

    def handle(self):
        for line in self.rfile:
            self.wfifle.write(self.ack + line)

from functools import partial
serv = TCPServer(('', 15000), partial(EchoHandler, ack=b'RECEIVED:'))
serv.serve_forever()

from funtools import partial

serv = TCPServer(('', 15000), partial(EchoHandler, ack=b'RECEIVED:'))
serv.serve_forever()


