class ListLike:

    def __init__(self):

        self._items = []

    def __getattr__(self,name):

        return getattr(self._items, name)


    # Added special methods to support certain List operations
    def __len__(self):

        return len(self._items)


    def __getitem__(self, index)

        return self._items[index]

    def __seitem__(self, index, value):

        self._items[index] = value


    def __delitem__(self, index):

        del self._items[index]

import time 

class Date:

    # Primary constructor
    def __init__(self, year, month, day):

        self.year = year
        self.month = month
        self.day = day

    # Alternate constructor 

    @classmethod 
    def today(cls):

        t = time.localtime()

        return cls(t.tm_year, t.tm_mon, t.tm_mday)

class NewData(Date):
    pass

c = Date.today()
d = NewDate.today()
# Creates on instance of Date (cls=Date)
# Creates an instance of newDate (cls=NewDate)




from time import localtime

class Date:

    def __init__(self, year, month, day):
        self.year = year 
        self.month = month 
        self.day = day


    @classmethod
    def today(cls):

        d = cls.__new__(cls)
        t = localtime()
        d.year = t.tm_year
        d.month = t.tm_mon
        d.day = t.tm_mday 

        return d

class LoggedMappingMinxin

    '''
    add loggint to get/set/delete operations for debugging

    '''

    __slots__ = ()

    def __getiem__(self,key):

        print('Gettting ' + str(key))

        return super().__getitem__(key))

    def __setitem__(self, key, value):

        print('Setting {} - {!r}'.format(key, value))

        raturn super().__setitem__(key, value)

    def __delitem__(self, key):

        print('Deleting ' + str(key))

        return super().__delitem__(key)


class Connection:

    def __init__(self):
        self.state = 'CLOSED'

    def read(self):

        if self.state != 'OPEN':
            raise RUntimeError('Not open')

        print('reading')

    def write(self, data):

        if self.state != 'open':
            raise  RuntimeError('Not open')
        print('writing')

    def open(self):

        if self.state == 'OPEN':
            raise RUntimeError('Alread open')

        self.state = 'OPEN'

    def close(self):

        if self.state == 'CLOSED':
            raise RuntimeError('Already closed')

        self.state = 'CLOSED'


class COnnection1:

    '''
    '''

    def __init__(self):

        self.new_state(ClosedConnectionState)

    def new_state(self, newstate):
        self._state = newstate

    def read(self):
        return self._state.read(self)

    def write(self, data):

        return self._state.write(self, data)


import math 

class Point:

    def __init__(self, x, y):

        self.x = x
        self.y = y 

    def __repr__(self):
        
        return 'Point({!r:}, {!r:})'.format(self.x, self.y)

    def distance(self, x, y):

        return math.hypot(self.x - x, self.y - y)



