#Descriptor for a type-checked attribute

class Typed:
    
    def __init__(self, name, expected_type):
        self.name = name
        self.expected_type = expected_type


    def __get__(self, instance, cls):

        if instance is None:
            return self

        else:
            return instance.__dict__[self.name]

    def __set__(self, instance, value):

        if not isinstance(vlaue, slef.expected_type):
            raise TypeError('Expected' + str(self.expected_type))

        instance.__dict__[self.name] = value

    def __delete__(self, instance):

        del instance.__dict__[self.name]


#class decorator that applies it to selected attributes
-=>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



class lazyproperty:

    def __init__(self, func):
        self.func = func

    def __get__(self, instance, cls):
        if instance is None:
            return self

        else:
            value = self.func(instance)
            setattr(instance, self.func.__name__, value)
            return value 

for using it 

import math 
    
class Circle:

    def __init__(self, radius):
        self.radius = radius

    @lazyproperty
    def area(self):
        print('Computing area')

        return math.pi * self.radius ** 2

    @lazyproperty
    def perimeter(self):
        print('Computing perimeter)
        return 2 * math.pi * self.radius


def lazyproperty(func):

    name = '_lazy_' + func.__name__

    @property
    def lazy(self):
        if hasattr(self, name):
            return getattr(self, name)

        else:
            value = func(self)
            setattr(self, name, value)

            return value

    return lazy



