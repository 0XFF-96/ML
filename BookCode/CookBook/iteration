class Node:
    def __init__(self, value):
        self._value = value
        self.children = []

    def __repr__(self):
        return 'NOnde({!r}).format(self._value)

    def add_child(self, node):
        self._children.append(node)

    def __iter__(self):
        return iter(self._children)

#Example

if __name__ == '__main__':

    root = Node(0)
    child1 = Node(1)
    child2 = Node(2)

    root.add_child(child1)
    root.add_child(child2)

    # outputs Node(1), Node(2)
    for ch in root:
        print (ch)

>>>>>>>>>generation

def frange(start, stop, increment):
    x = start 
    while x < stop:
            yield x 
            x += increment

class Node:
    def __init__(self, value):
        self._value = value
        self._children = []

    def __repr__(self):
        return 'NOnde({!r})'.format(self._value)

    def add_child(self, node):
        self._children.append(node)

    def __iter__(self):
        return iter(slef._children)

    def depth_first(self):
        yield self
        for c in self:
            yield from c.depth_first()


