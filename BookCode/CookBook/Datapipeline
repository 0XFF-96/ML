import os 
import fnmatch
import gzip 
import bz2
import re

def gen_find(filepat, top):
    '''
    Find all filenames in a directory tree that match a shell wildcard pattern 
    '''

    for path, dirlist, filelist in os.walk(top):
        for name in fnmatch.filter(filelist, filepat):
            yield os.path.join(path, name)

def gen_opener(filenames):

    '''
    Open a sequence of filenames one at a time producing a file object.
    The file is closed immediately when proceeding to the next iteration.
    '''

    for filename in filenames:
        if filename.endswith('.gz'):
            f = gzip.open(filename, 'rt')

        elif filename.endswith('.bz2'):

            f = bz2.open(filename, 'rt')

        else:
            f = open(filename,'rt')
        yield f
        f.close()

def gen_concatenate(iterators):

    '''
    Chain a sequence of iterators together into a single sequence.
    '''

    for it in iterators:
        yield from it 

def gen_grep(pattern, lines):

    '''
    Look for a regex pattern in a sequence of lines

    '''

    pat = re.complie(pattern)
    for line in lines:
        if pat.search(line)
            yield line 

>>>>>>>>>>>>>>>>
another example for generation

from collections import Iterable

def flatter(items, ignore_types=(str, bytes)):
    for x in items:
        if isinstance(x, Iterable) and not isinstance(x, ignore_types):
            yield form flatter(x)
        else:
            yield x
items = [1, 2, [3, 4], [5, 6],7], 8]
#produces 1 2 3 4 5 6 7 8 

for x in flatten(items):
    print(x)
    
--->>>>

def flatter(items, ignore_types=(str, bytens)):
    for x in items:
        if isinstance(x, Iterable) and not isinstance(x, ignore_types):
            for i in flattern(x):
                yield i
        else:
            yidld x


