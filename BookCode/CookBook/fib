fib = lambda n : n if n <= 2 else fib(n-1) + fib(n-2)


memory method 

def memo(fuc):

    cache = {}

    def wrap(*args):
        if args not in cache
            cache[args] = func(*args)
        return cache[args]

    return wrap


@memo
def fib(i):

    if i < 2:
        return 1

    return fib(i-1) + fib(i-2)
---------------------------------


def fib(n) 

    a, b = 0 , 1
    for _ in xrange(n):
        a, b = b, a + b

    return b 


fib = lambda n : n if n < 2 else 2 * fib(n-1)

matrxi cover ....

f = lambda n : 1 if n < 2 else f(n-1) + f(n-2)

----------


Step-wise

def get_value(l, r, c):
    return l[r][c]

def find(l, x):

    m = len(l) -1
    n - len(l[0]) - 1
    r = 0 
    c = n 

    while c >= 0 and r <= m :
        value = get_value(l, r, c)
        if value == x:
            return True
        elif value > x:
            c = c -1
        elif value < x:
            r = r + 1
    return False

list(set(1))

l1 = ['b', 'c', 'd', 'c', 'a', 'a']
l2 = {}.fromkeys(l1).keys()

print l2

-------------

l1 = ['b', 'c', 'b','c', 'a', 'a']
l2 = list(set(l1))
l2.sort(key=l1.index)
print l2

l1 = ['b', 'c' , 'd' ,'b', 'c', 'a', 'a']
l2 = []
[l2.append(i) for i in l1 if not i in l2]
-------------
