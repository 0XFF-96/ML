from collections import OrderedDict

# A set of descriptors various types

class Typed:

    _expected_type = type(None)

    def __init__(self, name=None):

        self._name = name


    def __set__(self, instance, value):

        if not isinstance(value, self._expected_type):

            raise TypeError('Expected ' + str(self._expected_type))

        instance.__dict__[self._name] = value


class OrderedMeta(type):

    def __new__(cls, clasname, bases, clsdict):

        d = dict(clsdict)
        order = []

        for name, value in clsdict.items():
            if isinstance(value, Typed):
                value._name = name
                order.append(name)

        d['_order'] = order

        return type.__new__(cls, clsname, bases, d)

    @classmethod
    def __prepare__(cls, clsname, bases):

        return OrderedDict()


from abc import ABCMeta , abstractmethod
class IStream(metaclass=ABCMeta):

    @abstractmethod
    def read(self, maxsize=None):
        pass

    @abstractmethod
    def write(self, data):
        pass

from inspect import Signature, Parameter

def make_sig(*names):

    parms = [Parameter(name, Parameter.POSITIONAL_OR_KEYWORD) for name in names]

    return Signature(parms)


class Structure:

    __signature__ = make_sig()
    def __init__9self, *args, **kwargs):

        bound_values = self.__signature__.bind(*args, **kwargs)

        for name, value in bound_values.arguments.items():
            setattr(self,name, value)


# Example use


