import time
#Code to execute in an independent thread

def countdown(n):
    while n > 0:
        print('T-minus', n)
        n -= 1
        time.sleep(5)


from threading import THread

t = Thread(target=countdown, args=(10, ))
t.start()


class CountdownTask:

    def __init__(self):
        self._running = True

    def terminate(self):

        self._running = False

    def run(self, n):
        
        while self._runing and n > 0 :
            print ('T-minus', n)
            n -= 1
            time.sleep(5)


    c = CountdownTask()
    t = Thread(target=c.run, args=(10, ))
    
    t.start()
    c.terminate()

class IOTask:
    
    def terminate(self):
        self._running = False

    def run(self, sock):

        sock.settimeout(5)
        while self._running:

            # Perform a blocking I/O operation w/ timeout

            try:
                data = sock.recv(8192)
                break

            except socket.timeout:
                
                continue
            # Countinued processing 

            ...
        #Terminated
        return 

from threading imort Thread

class CountdownThread(Thread):

    def __init__(self, n):
        super().__init__()
        self.n = 0


    def run(self):

        while self.n > 0:

            print('T-minus', self.n)
            self.n -= 1
            time.sleep(5)

c = CountdownThread(5)
c.start()

from threading import Thread, Event
import time

#Code to execute in an independent thread

def countdown(n, started_evt):

    print('countdown starting')
    started_evt.set()

    while n > 0:
        print('T-mins', n)
        n -= 1
        time.sleep(5)

#Create the event object that will be used to signal startup
started_evt = Event()

#Launch the thread and pass the startup envnt
print('Launching countdown')

t = Thread(target=countdown, args=(10, started_evt))
t.start()

wait for the thread to start
started_evt.wait()
print('countdown is running')



