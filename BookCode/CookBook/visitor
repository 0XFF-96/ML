class Node:
    pass

class UnaryOPerator(Node):

    def __init__(self, operand):
        self.operand = operand


class BinaryOperator(Node):

    def __init__(self, left, right):

        self.left = left
        self.right = right


class Add(BianryOperator):

    pass

class Sub(BInaryOperator):

    pass

class Div(BInaryOperator):

    pass

class Negate(UnaryOperator):

    pass

class Number(Node):

    def __init__(self, value):
        self.value = value 

------more advance ....


class NodeVisitor:

    def visit(self, node):
        methname = 'visit_' + type(node).__name__
        meth = getattr(self, methname, None)

        if meth is None:
            meth = self.generic_visit
        return meth(node)

   def generic_visit(self, node):
        
        raise RuntimeError('No {} mehtod'.format('visit_' + type(node).__name__))


class Evaluator(NodeVisitor):

    def visit_Number(self, node):

        return node.value

    def visit_Add(self, node):

        return self.visit(node.left) + self.visit(node.right)

class HTTPHandler:

    def handle(self, request):

        methname = 'do_' + request.request_method

    def do_GET(self, request):

        pass

    def do_POST(self, request):
        
        pass

    def do_HEAD(self, reqest):

        pass

import types 

class Node:
    pass

class NodeVisitor:

    def visit(self, node):
        stack = [node]
        last_result = None

        while stack:
            try:
                last = stack[-1]
                if isinstance(last, types.GeneratorType):
                    stack.append(last.send(last_result))

                elif isinstance(last, Node):
                    stack.append(self._visit(stack.pop()))

                else:
                    last_result = stack.pop()

            except StopIteration:
                
                stack.pop()

        return last_result

   def _visit(self, node):

        methname = 'visit_' + type(node).__name__

        meth = getattr(self, methname, None)

        if meth is None :
            meth  = self.generic_vist

        return meth(node)

   def generic_visit(self, node):

    raise RuntimeError('No {} method'.format('visit_' + type(node).__name__))


value = self.visit(node.left) is equvilent to value = yield node.left



