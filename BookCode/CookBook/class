class Pair:

    def __init__(self,x, y):
        self.x = x
        self.y = y

    def __repr__(self):

        return 'Pair({0.x!r}, {0.y!r})'.foramt(self)

    def __str__(self):
        
        return '({0.x!s},{0.y!s})'.format(self)

_formats = {
    'ymd' : '{d.year}--{d.month}--{d.day}',
    'mdy' : '{d.month}/{d.day}/{d.year}', 
    'dmy' : '{d.day} / {d.month}/{d.year}'
}

class Date:
    
    def __init__(self, year, month, day):
        
        self.year = year 
        self.month = month
        self.day = day 

    def __format__(self, code):

        if code == '':

            code = 'ymd'

        fmt = _formats[code]

        return fmt.format(d=self)

from socket import socket, AF_INET, SOCK_STREAM 

class LazyConnection:

    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):
        
        self.address = address
        self.family = family 
        self.type = type 
        self.sock = None

    def __enter__(self):
        if self.sock is not None:
            raise RuntimeError('Already connected')

        self.sock = socket(self.family, self.type)
        self.sock.connect(self.address)

        return self.sock 

    def __exit__(self, exc_ty, exc_val, tb):

        self.sock.close()
        self.sock = None 

from functools import partial 

conn = LazyConnection(('www.python.org', 80))
#Connection closed 

with conn as s:
    # conn.__enter__() execultes: connection open 
    s.send(b'GET / index.html HTTP/1.0\r\n')
    s.send(b'Host: www.python.org\r\n')
    s.send(b'\r\n')
    resp = b''.join(iter(partial(s.recv, 8192), b''))

    #Connn.__exit__() executes: connection closed 

from socket import socket, AF_INET, SOCK_STREAM 

class LazyConnection:

    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):
        self.address = address
        self.family = family 
        self.type = type
        self.connections = []

    def __enter__(self):

        sock = socket(self.family, self.type)
        sock.coonect(self.address)
        self.connections.append(sock)

        return sock 

    def __exit__(self, exc_ty, exc_val, tb):

        self.connections.pop().close()

Exmaple use

from functools import partial 

conn = LazyConnection(('www.python.org', 80))
with conn as s1:
    pass
    with conn as s2:
        pass 
        #s1 and s2 are independent sockets  


