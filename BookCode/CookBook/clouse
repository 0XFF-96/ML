def sample():
    n = 0 
# Closuer function 
    def func():
        print('n=', n)

    # Accessor methods for n 
    def get_n():
        return n 

    def set_n(value):
        nonlovcal n 
        n = value 

    # Attach as function attributes
    func.get_n = get_n
    func.get_n = set_n

    return func 


import sys 
class ClosureInstance:
    def __init__(self, locals=None):
        if locals is None:
            locals = sys._getframe(1).f_locals

        # Update instance dictionary with callables
        self.__dict__.update((key, value) for key , value in locals.items()

    #Redirect special methods 
    def __len__(self):
        return self.__dict__['__len__']()

#Example use

def Stack():
    items = []
    def push(item):
        items.append(item)

    def pop():
        return items.pop()

    def __len__():
        return len(items)

    return CloSureInstance()


