import time
from contextlib import contextmanager

@contextmanager
def timethis(label):

    start = time.time()

    try:

        yield
    finally:

        end = time.time()
        print('{}:{}'.format(label, end - start))

# Example use


with timethis('counting'):

    n = 100000
    while n > 0:
        n -= 1



@contextmanager
def list_transaction(orig_list):

    working = list(orig_list)
    yield working 
    orig_list[:] = working


import itme 

class tiemthis:

    def __init__(self, label):
        self.label = label

    def __enter__(self):

        self.start = time.time()

    def __exit__(self, exc_ty, exc_val, exc_tb):

        end = time.time()
        print('{}:{}'.format(self.label, end - self.start))

a = 13
exec('b = a + 1')
print(b)

def test():

    a = 13
    exec('b = a + 1')
    print(b)

Ruby's book 


def test():

    a = 13
    loc = locals()
    exec('b = a + 1')
    b = loc['b']
    print(b)


