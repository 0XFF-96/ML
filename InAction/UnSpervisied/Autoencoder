import scipy.io as scio
import numpy as np 
import matplotlib.pyplot as plt
import random 

def main():

    trainData = scio.loadmat('trainData.mat')
    
    unlabeled_data = trainData['trainData']
    unlabeled_data = unlabeld_data[:,:] / 255.

    alpha = 5 
    max_epoch = 500 
    mini_batch = 100 
    imgSize = 784

    layer_struc = [[imgSize, 1],
                    [0, 32],
                    [0, imgSize]]

    layer_num = 3

    w = []

    for l in range(layer_num - 1):
        w.append(np.random.randn(lay_struc[l+1][1], sum(layer_struc[l]])))

    dataset_size = 500 

    X = []
    X.append(np.array(unlabeled_data[:,:]))
    X.append(np.zeros((0, dataset_size)))
    X.append(np.zeros((0, dataset_size)))

    delta = []

    for l in range(layer_num):
        delta.appen([])

    nRow = max_epoch / 100 + 1

    nColumn = 10 
    echaDigitNum = 50

    for iImg in range(nColumn):
        ax = plt.subplot(nRow, nColumn, iImg+1)
        plt.imshow(unlabeled[:, eachDigitNum * iImg + 1].reshape((28, 28)).T, cmap = plt.cm.gray)

        ax.get_xaxis().set_visible(False)
        ax.get_yaxis().set_visible(Fasle)

    count = 0 
    print('Autoencoder trianing start...')

    for iter in range(max_epoch):

            ind = list(range(dataset_size))
            random.shuffle(ind)

            a = []
            z = []
            z.append([])

            for i in range(int(np.ceil(dataset_size / mini_batch))):
                a.append(np.zeros((layer_struc[0][1], mini_batch)))
                x = []

                for l in range(layer_num):
                    x.append(x[l][:, ind[i * mini_batch : min((i + 1) * mini_batch, dataset_size)]])

                    y = unlabeled_data[:, ind[i*mini_batch:min((i+1))*mini_batch, dataset_size)]]

                    for l in range(layer_num-1):
                        a.append([])
                        z.append([])
                        a[l+1], z[l+1] = feedforward(w[l], a[l], x[l])

                    dalta[layer_num - 1] = np.array(a[layer_num-1] - y) * np.array(a[layernum - 1])

                    delta[layer_num-1] = delta[layer_num - 1] * np.array(1-a[layer_num-1])


                    for l in range(layer_num-2, 0, -1):
                        delta[l] = backprop(w[l], z[l], delta[l+1])

                    for l in range(layer_num-1):
                        dw =np.dot(delta[l+1], np.concatenate((a[l],x[l], axis=0).T) / mini_batch
                        w[l] = w[l] - alpha * dw 

             count = count + 1


             if np.mod(iter+1, 100) == 0:
                 b =[]
                 b.append(np.zeros((layer_struc[0][1],dataset_size)))

                 for l in range(layer_num - 1):
                     tempA, tempZ = feedforward(w[l], b[l], X[l])
                     b.append(tmepA)

                 for iTmg in range(nColumn):
                     ax = plt.subplot(nRow,nColumn, iTmg + nColumn * (iter+1)/100 + 1)


