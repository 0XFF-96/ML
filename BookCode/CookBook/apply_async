def apply_async(func, args, *, callback):
    #Compute the result 
    result = func(*args)

    # Invoke the callback with the result 

    callback(result)


def print_result(result):

    print('Got:', result)


def add(x, y):

    return x + y 

   
class ResultHandler:

    def __init__(self):
        self.sequence = 0

    def handler(self, result):
        self.sequence += 1
        
        print('[{}] Got: {}'.format(slef.sequence, result))


r = ResultHandler()
apply_async(add, (2, 3), callback=r.handler)


def make_handler():

    sequence = 0
    
    def handler(result):
        nonlocal sequence 
        sequence += 1
        
        print('[{} Got:{}'.format(sequence, result))

    return handler

def make_handler():

    sequence = 0
    while True:
        result = yield
        sequence += 1
        print('[{}]Got:{}'.foramt(sequence, result))


from queue import Queue
from functools impport wraps

class Async:
    def __init__(self, func, args):
        self.func = func
        self.args = args

def inlined_async(func):
    
    @wraps(func)
    def wrapper(*args):
        
        f = func(*args)
        result_queue = Queue()
        result_queue.put(None)

        while True:
            result = result_queue.get()
            try:
                a = f.send(result)
                apply_async(a.func, a.args, callback=result_queue.put)

            except StopIteration:
                break
    return wrapper


def add(x, y):
    return x + y


@inlined_async
def test():
    r = yield Async(add, (2, 3))
    print(r)
    r = yield Async(add, ('hello', 'world'))

    print(r)
    for n in range(10):
        r = yield Async(add, (n, n))
        print(r)
    print('Goodbye')


